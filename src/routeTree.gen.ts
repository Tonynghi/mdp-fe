/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './features/~__root';
import { Route as IndexImport } from './features/~index';
import { Route as UsersIdImport } from './features/~users/~$id';
import { Route as UsersIndexImport } from './features/~users/~index';
import { Route as LoginIndexImport } from './features/~login/~index';
import { Route as HomeIndexImport } from './features/~home/~index';

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const UsersIdRoute = UsersIdImport.update({
  id: '/users/$id',
  path: '/users/$id',
  getParentRoute: () => rootRoute,
} as any);

const UsersIndexRoute = UsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any);

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any);

const HomeIndexRoute = HomeIndexImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/home/': {
      id: '/home/';
      path: '/home';
      fullPath: '/home';
      preLoaderRoute: typeof HomeIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/login/': {
      id: '/login/';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof LoginIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/users/': {
      id: '/users/';
      path: '/users';
      fullPath: '/users';
      preLoaderRoute: typeof UsersIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/users/$id': {
      id: '/users/$id';
      path: '/users/$id';
      fullPath: '/users/$id';
      preLoaderRoute: typeof UsersIdImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/home': typeof HomeIndexRoute;
  '/login': typeof LoginIndexRoute;
  '/users': typeof UsersIndexRoute;
  '/users/$id': typeof UsersIdRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/home': typeof HomeIndexRoute;
  '/login': typeof LoginIndexRoute;
  '/users': typeof UsersIndexRoute;
  '/users/$id': typeof UsersIdRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/home/': typeof HomeIndexRoute;
  '/login/': typeof LoginIndexRoute;
  '/users/': typeof UsersIndexRoute;
  '/users/$id': typeof UsersIdRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/home' | '/login' | '/users' | '/users/$id';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/home' | '/login' | '/users' | '/users/$id';
  id: '__root__' | '/' | '/home/' | '/login/' | '/users/' | '/users/$id';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  HomeIndexRoute: typeof HomeIndexRoute;
  LoginIndexRoute: typeof LoginIndexRoute;
  UsersIndexRoute: typeof UsersIndexRoute;
  UsersIdRoute: typeof UsersIdRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeIndexRoute: HomeIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
  UsersIdRoute: UsersIdRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "~__root.tsx",
      "children": [
        "/",
        "/home/",
        "/login/",
        "/users/",
        "/users/$id"
      ]
    },
    "/": {
      "filePath": "~index.tsx"
    },
    "/home/": {
      "filePath": "~home/~index.tsx"
    },
    "/login/": {
      "filePath": "~login/~index.tsx"
    },
    "/users/": {
      "filePath": "~users/~index.tsx"
    },
    "/users/$id": {
      "filePath": "~users/~$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
